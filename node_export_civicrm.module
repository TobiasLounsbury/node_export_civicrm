<?php

/**
 * Lookup to encode a form_key into a CIVICRM_NODE_EXPORT string
 *
 * Given a custom group id and a custom field id
 * look up the names, compose an encoded string and return it
 *
 * @param $pieces
 *  exploded string of an encoded form key
 *  0 = prefix
 *  1 = custom group id
 *  2 = custom field id
 * @param $entity
 *  The node_export_civicrm pseudo entity to encode in the string
 *  for the purpose of selecting a decoding scheme on import.
 * @param $original
 * @return string
 */
function _getCiviCRMCustomGroupAndFieldNames($prefix, $group, $field, $entity, $original) {
  civicrm_initialize();
  try {
    $customGroupName = civicrm_api3('CustomGroup', 'getvalue', array(
      'id' => $group,
      'return' => 'name',
    ));

    $customFieldName = civicrm_api3('CustomField', 'getvalue', array(
      'custom_group_id' => $group,
      'id' => $field,
      'return' => 'name',
    ));
    return "CIVICRM_NODE_EXPORT:{$entity}:{$prefix}:{$customGroupName}:{$customFieldName}:{$group}:{$field}";
  } catch (Exception $e) {
    //If for some reason we couldn't find the custom group or field
    //Return the original string.
    return $original;
  }
}


function _getCiviCRMCustomFieldName($prefix, $field, $entity, $original) {
  civicrm_initialize();
  try {
    $customFieldName = civicrm_api3('CustomField', 'getvalue', array(
      'id' => $field,
      'return' => 'name',
    ));
    return "CIVICRM_NODE_EXPORT:{$entity}:{$prefix}:{$customFieldName}:{$field}";
  } catch (Exception $e) {
    //If for some reason we couldn't find the custom field
    //Return the original string.
    return $original;
  }
}


/**
 * Lookup to Generate form_keys for custom fields
 *
 * Takes a format string, group name, and field name
 * Does a lookup to find the IDs of the group and field,
 * Then replaces the tokens for those two items in the format string.
 *
 * @param $format
 * @param $group
 * @param $field
 * @param $oldGroup
 * @param $oldField
 * @return string
 */
function _getFormKeyFromFieldAndGroupNames($format, $group, $field, $oldGroup = null, $oldField = null) {
  civicrm_initialize();

  try {
    $customGroupId = civicrm_api3('CustomGroup', 'getvalue', array(
      'name' => $group,
      'return' => 'id',
    ));

    $customFieldId = civicrm_api3('CustomField', 'getvalue', array(
      'custom_group_id' => $customGroupId,
      'name' => $field,
      'return' => 'id',
    ));

    return str_replace(array("#GROUP#", "#FIELD#"), array($customGroupId, $customFieldId), $format);
  } catch (Exception $e) {
    return str_replace(array("#GROUP#", "#FIELD#"), array($oldGroup, $oldField), $format);
  }
}


/**
 * Lookup to Generate form_keys for custom fields
 *
 * Takes a format string, and field name
 * Does a lookup to find the ID of the field,
 * Then replaces the token in the format string.
 *
 * @param $format
 * @param $field
 * @param $oldField
 * @return string
 */
function _getFormKeyFromFieldName($format, $field, $oldField) {
  civicrm_initialize();

  try {
    $customFieldId = civicrm_api3('CustomField', 'getvalue', array(
      'name' => $field,
      'return' => 'id',
    ));

    return str_replace("#FIELD#", $customFieldId, $format);
  } catch (Exception $e) {
    return str_replace("#FIELD#", $oldField, $format);
  }
}

/**
 * Given an array of type_direction keys, return
 * an encoded string that contains the oldid, direction
 * and name of the relationship type.
 *
 * @param $types
 * @return string
 */
function _getRelationshipTypeNameFromId($types) {
  $names = array();
  foreach($types as $type) {
    list($id, $ab) = explode("_", $type);
    $return = ($ab == "b") ? "name_b_a" : "name_a_b";

    $name = civicrm_api3('RelationshipType', 'getvalue', array(
      'return' => $return,
      'id' => $id,
    ));

    $names[] = "{$name}|{$ab}|{$id}";
  }

  return "CIVICRM_NODE_EXPORT:". implode(":", $names);
}

/**
 * Given an encoded string, fetch relationship type ids
 * for each type that we have a name for. Otherwise return the old id.
 *
 * @param $string
 * @return Civi\Angular\Page\Main
 */
function _getRelationshipTypeIdFromName($string) {
  $names = explode(":", str_replace("CIVICRM_NODE_EXPORT:", "", $string));
  $ids = array();

  foreach($names as $nameString) {
    list($name, $ab, $oldId) = explode("|", $nameString);
    $nameType = ($ab == "b") ? "name_b_a" : "name_a_b";
    try {
      $id = civicrm_api3('RelationshipType', 'getvalue', array(
        'return' => "id",
        "{$nameType}" => $name,
      ));
      $ids["{$id}_{$ab}"] = "{$id}_{$ab}";
    } catch (Exception $e) {
      $ids["{$oldId}_{$ab}"] = "{$oldId}_{$ab}";
    }
  }

  return $ids;
}

/**
 * Does a lookup against OptionValue
 * returns the name from te group, and value.
 * Useful for things like activity type
 *
 * @param $group
 *   The Option group to which this option value belongs
 * @param $value
 * @return string
 */
function _getOptionValueName($group, $value) {

  $name = civicrm_api3('OptionValue', 'getvalue', array(
    'return' => "name",
    'value' => $value,
    'option_group_id' => $group,
  ));

  return "CIVICRM_NODE_EXPORT:{$name}:{$value}";
}


/**
 * Does a lookup against OptionValue
 * returns the VALUE from the group, and name.
 * Useful for things like activity type
 *
 * @param $group
 *   The Option group to which this option value belongs
 * @param $name
 * @param $oldValue
 * @return string
 */
function _getOptionValueValue($group, $name, $oldValue) {
  try {
    $value = civicrm_api3('OptionValue', 'getvalue', array(
      'return' => "value",
      'name' => $name,
      'option_group_id' => $group,
    ));
    return $value;
  } catch (Exception $e) {
    return $oldValue;
  }
}


/**
 * Translates casetypes between name and id
 *
 * @param $from
 * @param $to
 * @param $fromValue
 * @param $oldTo
 * @return string
 */
function _caseTypeLookup($from, $to, $fromValue, $oldTo) {
  try {
    $result = civicrm_api3('CaseType', 'getvalue', array(
      'return' => $to,
      "{$from}" => $fromValue,
    ));
    return $result;
  } catch (Exception $e) {
    return $oldTo;
  }
}


/**
 * Implementation of hook_node_export_encode_alter
 * invoked when a node is being exported
 *
 * Watch for civicrm webform custom fields, do a lookup and
 * replace the form_key with names so we can parse them on import
 *
 * @param $code_string
 * @param $nodes
 * @param $format
 */
function node_export_civicrm_node_export_encode_alter(&$code_string, $nodes, $format) {
  if ($format == "json") {
    $nodesToAlter = array();

    //Compile a list of nodes that are webforms with civicrm components
    foreach($nodes as $index => $node) {
      if ($node->type == "webform") {
        if (property_exists($node, "webform_civicrm")) {
          $nodesToAlter[] = $index;
        }
      }
    }

    //Act on our pre-compiled list of nodes.
    if(!empty($nodesToAlter)) {
      $nodesObj = json_decode($code_string, true);
      foreach($nodesToAlter as $nodeIndex) {
        //Handle Form Keys in custom Fields
        foreach($nodesObj[$nodeIndex]['webform']['components'] as &$field) {
          //Handle Contact and Activity Custom Fields
          if (preg_match('/civicrm_.*_cg/', $field['form_key'])) {
            //Get CiviCRM Custom Names
            $pieces = explode(":", preg_replace("/(civicrm_.*)_cg([0-9]*)_custom_(.*)/", '${1}:${2}:${3}', $field['form_key']));
            $field['form_key'] = _getCiviCRMCustomGroupAndFieldNames($pieces[0], $pieces[1], $pieces[2], "CUSTOM", $field['form_key']);
          }
          //Handle Relationship Custom Fields
          if (preg_match('/civicrm_.*relationship_custom/', $field['form_key'])) {
            //Get CiviCRM Custom Field Name Only
            $pieces = explode(":", preg_replace("/(civicrm_.*)_relationship_custom_(.*)/", '${1}:${2}', $field['form_key']));
            $field['form_key'] = _getCiviCRMCustomFieldName($pieces[0], $pieces[1], "RELATIONSHIP", $field['form_key']);
          }
        }

        //Handle Relationship Types
        foreach($nodesObj[$nodeIndex]['webform_civicrm']['data']['contact'] as &$contact) {
          if(array_key_exists("relationship", $contact)) {
            foreach($contact['relationship'] as &$relationship) {
              if(array_key_exists("relationship_type_id", $relationship)) {
                $relationship['relationship_type_id'] = _getRelationshipTypeNameFromId($relationship['relationship_type_id']);
              }
            }
          }
        }

        //Handle Activity Types
        if (array_key_exists("activity", $nodesObj[$nodeIndex]['webform_civicrm']['data'])) {
          foreach ($nodesObj[$nodeIndex]['webform_civicrm']['data']['activity'] as &$activity) {
            if (is_array($activity)) {
              if (array_key_exists("activity", $activity)) {
                foreach ($activity['activity'] as &$type) {
                  if (array_key_exists("activity_type_id", $type)) {
                    $type['activity_type_id'] = _getOptionValueName("activity_type", $type['activity_type_id']);
                  }
                }
              }

              //Handle CaseTypes in Activities
              if (array_key_exists("case_type_id", $activity)) {
                $activity['case_type_id'] = "CIVICRM_NODE_EXPORT:". _caseTypeLookup("id", "name", $activity['case_type_id'], $activity['case_type_id']) . ":{$activity['case_type_id']}";
              }
            }
          }
        }

        //Todo: Handle Cases

      }
      $code_string = json_encode($nodesObj);
    }
  }
}


/**
 * Implementation of hook_node_export_import_alter
 * involed when a node is imported
 *
 * Loop through the nodes being imported, look for webforms
 * with civicrm components, and loop through the fields to find
 * form_keys that we encoded on export. When found do lookups and
 * replace the key with the standard webform_civicrm format.
 *
 * @param $nodes
 * @param $format
 * @param $save
 */
function node_export_civicrm_node_export_import_alter(&$nodes, $format, $save) {
  if ($format == "json") {
    foreach($nodes as &$node) {
      if($node->type == "webform" && property_exists($node, "webform_civicrm")) {

        //Handle Custom Fields
        foreach($node->webform['components'] as &$field) {
          if (substr($field['form_key'], 0, 19) == "CIVICRM_NODE_EXPORT") {
            $pieces = explode(":", $field['form_key']);

            switch($pieces[1]) {
              //The "CUSTOM" format also takes care of custom fields on activities
              case"CUSTOM":
                $format = "{$pieces[2]}_cg#GROUP#_custom_#FIELD#";
                $oldGroup = (array_key_exists(5, $pieces)) ? $pieces[5] : null;
                $oldField = (array_key_exists(6, $pieces)) ? $pieces[6] : null;
                $newKey = _getFormKeyFromFieldAndGroupNames($format, $pieces[3], $pieces[4], $oldGroup, $oldField);
                break;
              case "RELATIONSHIP":
                $format = "{$pieces[2]}_relationship_custom_#FIELD#";
                $oldField = (array_key_exists(4, $pieces)) ? $pieces[4] : null;
                $newKey = _getFormKeyFromFieldName($format, $pieces[3], $oldField);
                break;
            }

            $field['form_key'] = $newKey;
          }
        }

        //Handle Relationship Types
        foreach($node->webform_civicrm['data']['contact'] as &$contact) {
          if(array_key_exists("relationship", $contact)) {
            foreach($contact['relationship'] as &$relationship) {
              if(array_key_exists("relationship_type_id", $relationship) &&
                is_string($relationship['relationship_type_id']) &&
                substr($relationship['relationship_type_id'], 0, 19) == "CIVICRM_NODE_EXPORT") {
                $relationship['relationship_type_id'] = _getRelationshipTypeIdFromName($relationship['relationship_type_id']);
              }
            }
          }
        }


        //Handle Activity Types
        if (array_key_exists("activity", $node->webform_civicrm['data'])) {
          foreach ($node->webform_civicrm['data']['activity'] as &$activity) {
            if (is_array($activity)) {
              //Handle Activity Type Lookup
              if (array_key_exists("activity", $activity)) {
                foreach ($activity['activity'] as &$type) {
                  if (array_key_exists("activity_type_id", $type) && substr($type['activity_type_id'], 0, 19) == "CIVICRM_NODE_EXPORT") {
                    $pieces = explode(":", $type['activity_type_id']);
                    $type['activity_type_id'] = _getOptionValueValue("activity_type", $pieces[1], $pieces[2]);
                  }
                }
              }
              //Handle CaseType Lookups in Activities
              if (array_key_exists("case_type_id", $activity) && substr($activity['case_type_id'], 0, 19) == "CIVICRM_NODE_EXPORT") {
                $pieces = explode(":", $activity['case_type_id']);
                $activity['case_type_id'] = _caseTypeLookup("name", "id", $pieces[1], $pieces[2]);
              }
            }
          }
        }

        //todo: Handle Cases
      }
    }
  }
}